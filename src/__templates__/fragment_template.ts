const fragmentTemplate = (filename: string): string => {
  return `
//  Generated by relay-snapshot-test-generator 
import React from 'react';
//  TODO: replace with real component
import TestedFragmentComponent from 'TestedFragmentComponent';
import {createMockEnvironment, MockPayloadGenerator} from 'relay-test-utils';
import ReactTestRenderer from 'react-test-renderer';
import {QueryRenderer, graphql} from 'react-relay';

test('Fragment Container', () => {
  const environment = createMockEnvironment();
  const TestRenderer = () => (
    <QueryRenderer
      environment={environment}
      query={graphql\`
        query ${filename}Query @relay_test_operation {
          # todo:  replace with real fragment
          fragment(id: "test-id") {
            ...Fragment_node
          }
        }
      \`}
      variables={{}}
      render={({error, props}) => {
        if (props) {
          //  TODO: replace with real component
          return <TestedFragmentComponent node={props.fragment} />;
        } else if (error) {
          return error.message;
        }
        return 'Loading...';
      }}
    />
  );
  const renderer = ReactTestRenderer.create(<TestRenderer />);
  environment.mock.resolveMostRecentOperation(operation =>
    MockPayloadGenerator.generate(operation),
  );

  expect(renderer).toMatchSnapshot();
});`;
};

export default fragmentTemplate;
